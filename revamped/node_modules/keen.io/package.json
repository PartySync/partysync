{
  "name": "keen.io",
  "version": "0.1.3",
  "description": "Keen IO NodeJS module. Keen IO is a hosted API to collect, analyze, and visualize your data.",
  "homepage": "https://github.com/keenlabs/KeenClient-Node",
  "bugs": {
    "url": "https://github.com/keenlabs/KeenClient-Node/issues"
  },
  "author": {
    "name": "Ben Pearson",
    "email": "ben@inlight.com.au"
  },
  "contributors": [
    {
      "name": "Ben Pearson",
      "email": "ben@inlight.com.au",
      "url": "http://inlight.com.au"
    },
    {
      "name": "Daniel Kador",
      "email": "dan@keen.io",
      "url": "http://keen.io"
    },
    {
      "name": "Dustin Larimer",
      "email": "dustin@keen.io",
      "url": "https://github.com/dustinlarimer"
    },
    {
      "name": "Jay Shirley",
      "email": "jay@keen.io",
      "url": "https://github.com/jshirley"
    },
    {
      "name": "Bogdan Cirlig",
      "url": "https://github.com/bibanul"
    },
    {
      "name": "Jah Raphael",
      "email": "jahraphael@yahoo.com",
      "url": "https://github.com/jahraphael"
    }
  ],
  "main": "index.js",
  "scripts": {
    "test": "mocha"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/keenlabs/KeenClient-Node.git"
  },
  "engines": {
    "node": ">= 0.8.0"
  },
  "keywords": [
    "keen",
    "analytics",
    "api"
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/keenlabs/KeenClient-Node/blob/master/LICENSE-MIT"
    }
  ],
  "dependencies": {
    "superagent": "~0.21.0",
    "underscore": "~1.5.2"
  },
  "devDependencies": {
    "mocha": "~1.16.1",
    "should": "~2.1.1",
    "nock": "~0.27.0"
  },
  "readme": "# Keen IO - NodeJS\n\n[![Build Status](https://travis-ci.org/keenlabs/KeenClient-Node.png?branch=master)](https://travis-ci.org/keenlabs/KeenClient-Node)\n\nKeen IO is an online service to collect, analyze, and visualize your data.\n\n## Getting Started\n\nUse npm to install!\n\n```javascript\nnpm install keen.io\n```\n\n## Examples\n\n### Initialization\n\n```javascript\nvar Keen = require('keen.io');\n\n// Configure instance. Only projectId and writeKey are required to send data.\nvar client = Keen.configure({\n\tprojectId: \"<project_id>\",\n\twriteKey: \"<write_key>\",\n\treadKey: \"<read_key>\",\n\tmasterKey: \"<master_key>\"\n});\n```\n\nYou can also have multiple instances if you are connecting to multiple KeenIO accounts in the one project (probably edge case).\n\n```javascript\nvar Keen = require('keen.io');\n\n// Configure instance with API Key\nvar client1 = Keen.configure({...});\nvar client2 = Keen.configure({...});\n```\n\nIn the future there will be the ability to pass options into the initialisation such as batching inserts, etc. The structure of this hasn't been defined yet but will look something like the following.\n\n```javascript\nvar Keen = require('keen.io');\n\n// Configure instance with API Key and options\nvar client = Keen.configure({ \n\tprojectId: \"<project_id>\",\n\tbatchEventInserts: 30 \n});\n```\n\n### Send Events\n\n```javascript\nvar Keen = require(\"keen.io\");\nvar client = Keen.configure({\n\tprojectId: \"<project_id>\",\n\twriteKey: \"<write_key>\"\n});\n\n// send single event to Keen IO\nclient.addEvent(\"my event collection\", {\"property name\": \"property value\"}, function(err, res) {\n\tif (err) {\n\t\tconsole.log(\"Oh no, an error!\");\n\t} else {\n\t\tconsole.log(\"Hooray, it worked!\");\n\t}\n});\n\n// send multiple events to Keen IO\nclient.addEvents({\n\t\"my first event collection\": [{\"property name\": \"property value\"}, ...],\n\t\"my second event collection\": [{\"property name2\": \"property value 2\"}]\n}, function(err, res) {\n\tif (err) {\n\t\tconsole.log(\"Oh no, an error!\");\n\t} else {\n\t\tconsole.log(\"Hooray, it worked!\");\n\t}\n});\n```\n\n### Generate Scoped Key\n\n```javascript\nvar Keen = require(\"keen.io\");\nvar apiKey = \"YOUR_API_KEY\";\nvar scopedKey = Keen.encryptScopedKey(apiKey, {\n\t\"allowed_operations\": [\"read\"],\n\t\"filters\": [{\n\t\t\"property_name\": \"account.id\",\n\t\t\"operator\": \"eq\",\n\t\t\"property_value\": \"123\"\n\t}]\n});\nvar client = Keen.configure({\n\tprojectId: \"<project_id>\";\n\treadKey: scopedKey\n});\n```\n\n## Queries\n\nAnalyses are first-class citizens, complete with parameter getters and setters. \n\nThe `<Client>.run` method is available on each configured client instance to run one or many analyses on a given project. Read more about running multiple analyses below.\n\n**Format:**\n\n```javascript\nvar your_analysis = new Keen.Query(analysisType, params);\n```\n\n### Example Usage\n\n```javascript\nvar Keen = require('keen.io');\nvar client = Keen.configure({\n  projectId: \"your_project_id\",\n  readKey: \"your_read_key\"\n});\n\nvar count = new Keen.Query(\"count\", {\n  event_collection: \"pageviews\",\n  group_by: \"property\",\n  timeframe: \"this_7_days\"\n});\n\n// Send query\nclient.run(count, function(err, response){\n  if (err) return console.log(err);\n  // response.result\n});\n```\n\n\n### Query Analysis Types\n\nAll of the following analyses require an `event_collection` parameter. Some analyses have additional requirements, which are noted below.\n\n`count`\n\n`count_unique`\n\n`sum` requires a `target_property` parameter, where value is an integer\n\n`average` requires a `target_property` parameter, where value is an integer\n\n`maximum` requires a `target_property` parameter, where value is an integer\n\n`minimum` requires a `target_property` parameter, where value is an integer\n\n`select_unique` requires a `target_property` parameter\n\n`extraction` \n\n**A note about extractions:** supply an optional `email` attribute to be notified when your extraction is ready for download. If email is not specified, your extraction will be processed synchronously and your data will be returned as JSON.\n\n`Keen.Funnel` requires a `steps` attribute\n\n**A note about funnels:** funnels require a `steps` as an array of objects. Each step requires an `event_collection` and `actor_property` parameter.\n\n```javascript\nvar funfunfunnel = new Keen.Query('funnel', {\n  steps: [\n    {\n  \t  event_collection: \"view_landing_page\",\n  \t  actor_property: \"user.id\"\n    },\n    {\n  \t  event_collection: \"signed_up\",\n  \t  actor_property: \"user.id\"\n    },\n  ],\n  timeframe: \"this_6_months\"\n});\n```\n\n\nLearn more about funnels in the [API reference](https://keen.io/docs/data-analysis/funnels/#steps)\n\n### Run multiple analyses at once\n\nThe `<Client>.run` method accepts an individual analysis or array of analyses. In the latter scenario, the callback is fired once all requests have completed without error. Query results are then returned in a correctly sequenced array.\n\nQuery results are also attached to the query object itself, and can be referenced as `this.data`. \n\n```javascript\nvar avg_revenue = new Keen.Query(\"average\", { \n  event_collection: \"purchase\",\n  target_property: \"price\",\n  group_by: \"geo.country\" \n});\nvar max_revenue = new Keen.Query(\"maximum\", { \n  event_collection: \"purchase\",\n  target_property: \"price\",\n  group_by: \"geo.country\" \n});\n  \nvar mashup = client.run([avg_revenue, max_revenue], function(err, res){\n  if (err) return console.log(err);\n  // res[0].result or this.data[0] (avg_revenue)\n  // res[1].result or this.data[1] (max_revenue)\n});  \n```\n\n\n### Get/Set Parameters and Refresh Queries\n\n```javascript\n// Based on previous example\n\n// Update parameters\navg_revenue.set({ timeframe: \"this_21_days\" });\nmax_revenue.set({ timeframe: \"this_21_days\" });\n\n// Re-run the query\nmashup.refresh();\n```\n\n\n\n## Future Updates\n\nFuture module updates are planned to introduce the remaining API calls. You can see some sketches for these in the [examples directory](https://github.com/keenlabs/KeenClient-Node/blob/master/examples/). Also, as mentioned above, specifying options when creating an instance to configure the behaviour of the instance (ie, batching event submissions).\n\n## Contributing\n\nThis is an open source project and we love involvement from the community! Hit us up with pull requests and issues. \n\nThe aim is to build up this module to completely represent the API provided by Keen IO, which is quite extensive. The more contributions the better!\n\n## Further Reading\n\n[Keen IO - Website](https://keen.io/)\n\n[Keen IO - API Technical Reference](https://keen.io/docs/api/reference/)\n\n## Release History\n\n### 0.0.4\n\n- Update dependencies.\n\n### 0.0.3\n\n- Support generating Scoped Keys.\n\n### 0.0.2\n\n- Change error for blank write key.\n\n### 0.0.1\n\n- Add write/read keys.\n- Reworked interface - not backwards compatible with 0.0.0!\n\n### 0.0.0\n\n- First release.\n\n## License\n\nLicensed under the MIT license.\n",
  "readmeFilename": "README.md",
  "_id": "keen.io@0.1.3",
  "_shasum": "5056f5c989ab14ccf62fc20ed7598115ae7d09e3",
  "_from": "keen.io@",
  "_resolved": "https://registry.npmjs.org/keen.io/-/keen.io-0.1.3.tgz"
}
